{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/GoIt/goit-react-hw-02-feedback/src/components/App.jsx\";\n// 1 - Віджет відгуків\n\n// Як і більшість компаній, кафе Expresso збирає відгуки від своїх клієнтів.\n// Твоє завдання – створити додаток для збору статистики.Є лише три варіанти\n// зворотного зв'язку: добре, нейтрально і погано.\n\n// Крок 1\n\n// Застосунок повинен відображати кількість зібраних відгуків для кожної\n// категорії. Застосунок не повинен зберігати статистику відгуків між різними\n// сесіями(оновлення сторінки).\n\n// Стан застосунку обов'язково повинен бути наступного вигляду, додавати\n// нові властивості не можна.\n\n/* state = {\n  good: 0,\n  neutral: 0,\n  bad: 0\n} */\n\n// Інтерфейс може мати такий вигляд.\n\n// component preview\n// Крок 2\n\n// Розшир функціонал застосунку таким чином, щоб в інтерфейсі відображалося більше статистики про зібрані відгуки. Додай відображення загальної кількості зібраних відгуків з усіх категорій та відсоток позитивних відгуків. Для цього створи допоміжні методи countTotalFeedback() і countPositiveFeedbackPercentage(), які підраховують ці значення, ґрунтуючись на даних у стані (обчислювані дані).\n\n// component preview\n// Крок 3\n\n// Виконай рефакторинг застосунку. Стан застосунку повинен залишатися у кореневому компоненті <App>.\n\n// Винеси відображення статистики в окремий компонент <Statistics good={} neutral={} bad={} total={} positivePercentage={}>.\n// Винеси блок кнопок в компонент <FeedbackOptions options={} onLeaveFeedback={}>.\n// Створи компонент <Section title=\"\">, який рендерить секцію із заголовком і дітей (children). Обгорни кожен із <Statistics> і <FeedbackOptions> у створений компонент секції.\n// Крок 4\n\n// Розшир функціонал застосунку таким чином, щоб блок статистики рендерився тільки після того, як було зібрано хоча б один відгук. Повідомлення про відсутність статистики винеси в компонент <Notification message=\"There is no feedback\">.\n\n// component preview\nimport { Component } from 'react';\nimport { Feedback } from './Feedback/Feedback';\nimport { Statistics } from './Statistics/Statistics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n    this.handleAddFeedback = option => {\n      this.setState(prevState => {\n        return {\n          [option]: prevState[option] + 1\n        };\n      });\n    };\n    this.countTotalFeedback = () => {\n      return Object.values(this.state).reduce((acc, option) => acc + option, 0);\n    };\n    this.countPositiveFeedbackPercentage = () => {\n      const {\n        good\n      } = this.state;\n      return Math.round(good * 100 / this.countTotalFeedback()) || 0;\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        width: '400px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        title: \"Please leave feedback\",\n        children: /*#__PURE__*/_jsxDEV(Feedback, {\n          options: Object.keys(this.state),\n          onLeaveFeedback: this.handleAddFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Section, {\n        title: \"Statistics\",\n        children: this.countTotalFeedback() < 1 ? /*#__PURE__*/_jsxDEV(NotificationMessage, {\n          message: \"There is no feedback\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Statistics, {\n          good: this.state.good,\n          neutral: this.state.neutral,\n          bad: this.state.bad,\n          total: this.countTotalFeedback(),\n          percentage: this.countPositiveFeedbackPercentage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["Component","Feedback","Statistics","jsxDEV","_jsxDEV","App","constructor","args","state","good","neutral","bad","handleAddFeedback","option","setState","prevState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","render","style","marginLeft","marginRight","width","children","Section","title","options","keys","onLeaveFeedback","fileName","_jsxFileName","lineNumber","columnNumber","NotificationMessage","message","total","percentage"],"sources":["/Users/admin/Documents/GoIt/goit-react-hw-02-feedback/src/components/App.jsx"],"sourcesContent":["// 1 - Віджет відгуків\n\n// Як і більшість компаній, кафе Expresso збирає відгуки від своїх клієнтів.\n// Твоє завдання – створити додаток для збору статистики.Є лише три варіанти\n// зворотного зв'язку: добре, нейтрально і погано.\n\n// Крок 1\n\n// Застосунок повинен відображати кількість зібраних відгуків для кожної\n// категорії. Застосунок не повинен зберігати статистику відгуків між різними\n// сесіями(оновлення сторінки).\n\n// Стан застосунку обов'язково повинен бути наступного вигляду, додавати\n// нові властивості не можна.\n\n/* state = {\n  good: 0,\n  neutral: 0,\n  bad: 0\n} */\n\n// Інтерфейс може мати такий вигляд.\n\n// component preview\n// Крок 2\n\n// Розшир функціонал застосунку таким чином, щоб в інтерфейсі відображалося більше статистики про зібрані відгуки. Додай відображення загальної кількості зібраних відгуків з усіх категорій та відсоток позитивних відгуків. Для цього створи допоміжні методи countTotalFeedback() і countPositiveFeedbackPercentage(), які підраховують ці значення, ґрунтуючись на даних у стані (обчислювані дані).\n\n// component preview\n// Крок 3\n\n// Виконай рефакторинг застосунку. Стан застосунку повинен залишатися у кореневому компоненті <App>.\n\n// Винеси відображення статистики в окремий компонент <Statistics good={} neutral={} bad={} total={} positivePercentage={}>.\n// Винеси блок кнопок в компонент <FeedbackOptions options={} onLeaveFeedback={}>.\n// Створи компонент <Section title=\"\">, який рендерить секцію із заголовком і дітей (children). Обгорни кожен із <Statistics> і <FeedbackOptions> у створений компонент секції.\n// Крок 4\n\n// Розшир функціонал застосунку таким чином, щоб блок статистики рендерився тільки після того, як було зібрано хоча б один відгук. Повідомлення про відсутність статистики винеси в компонент <Notification message=\"There is no feedback\">.\n\n// component preview\nimport { Component } from 'react';\nimport { Feedback } from './Feedback/Feedback';\nimport { Statistics } from './Statistics/Statistics';\n\nexport class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleAddFeedback = option => {\n    this.setState(prevState => {\n      return {\n        [option]: prevState[option] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, option) => acc + option, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return Math.round((good * 100) / this.countTotalFeedback()) || 0;\n  };\n\n  render() {\n    return (\n      <div style={{ marginLeft: 'auto', marginRight: 'auto', width: '400px' }}>\n        <Section title=\"Please leave feedback\">\n          <Feedback\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleAddFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() < 1 ? (\n            <NotificationMessage message=\"There is no feedback\" />\n          ) : (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              percentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}