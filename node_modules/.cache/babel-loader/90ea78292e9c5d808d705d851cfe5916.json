{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/GoIt/goit-react-hw-02-feedback/src/components/App.jsx\";\n// 1 - Віджет відгуків\n\n// Як і більшість компаній, кафе Expresso збирає відгуки від своїх клієнтів.\n// Твоє завдання – створити додаток для збору статистики.Є лише три варіанти\n// зворотного зв'язку: добре, нейтрально і погано.\n\n// Крок 1\n\n// Застосунок повинен відображати кількість зібраних відгуків для кожної\n// категорії. Застосунок не повинен зберігати статистику відгуків між різними\n// сесіями(оновлення сторінки).\n\n// Стан застосунку обов'язково повинен бути наступного вигляду, додавати\n// нові властивості не можна.\n\n/* state = {\n  good: 0,\n  neutral: 0,\n  bad: 0\n} */\n\n// Інтерфейс може мати такий вигляд.\n\n// component preview\n// Крок 2\n\n// Розшир функціонал застосунку таким чином, щоб в інтерфейсі відображалося більше статистики про зібрані відгуки. Додай відображення загальної кількості зібраних відгуків з усіх категорій та відсоток позитивних відгуків. Для цього створи допоміжні методи countTotalFeedback() і countPositiveFeedbackPercentage(), які підраховують ці значення, ґрунтуючись на даних у стані (обчислювані дані).\n\n// component preview\n// Крок 3\n\n// Виконай рефакторинг застосунку. Стан застосунку повинен залишатися у кореневому компоненті <App>.\n\n// Винеси відображення статистики в окремий компонент <Statistics good={} neutral={} bad={} total={} positivePercentage={}>.\n// Винеси блок кнопок в компонент <FeedbackOptions options={} onLeaveFeedback={}>.\n// Створи компонент <Section title=\"\">, який рендерить секцію із заголовком і дітей (children). Обгорни кожен із <Statistics> і <FeedbackOptions> у створений компонент секції.\n// Крок 4\n\n// Розшир функціонал застосунку таким чином, щоб блок статистики рендерився тільки після того, як було зібрано хоча б один відгук. Повідомлення про відсутність статистики винеси в компонент <Notification message=\"There is no feedback\">.\n\n// component preview\nimport { Component } from 'react';\nimport { Feedback } from './Feedback/Feedback';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n    this.handleAddFeedback = option => {\n      this.setState(prevState => {\n        return {\n          [option]: prevState[option] + 1\n        };\n      });\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: 'auto',\n        width: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Feedback, {\n        options: Object.keys(this.state),\n        onLeaveFeedback: this.handleAddFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["Component","Feedback","jsxDEV","_jsxDEV","App","constructor","args","state","good","neutral","bad","handleAddFeedback","option","setState","prevState","render","style","marginLeft","width","children","options","Object","keys","onLeaveFeedback","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/admin/Documents/GoIt/goit-react-hw-02-feedback/src/components/App.jsx"],"sourcesContent":["// 1 - Віджет відгуків\n\n// Як і більшість компаній, кафе Expresso збирає відгуки від своїх клієнтів.\n// Твоє завдання – створити додаток для збору статистики.Є лише три варіанти\n// зворотного зв'язку: добре, нейтрально і погано.\n\n// Крок 1\n\n// Застосунок повинен відображати кількість зібраних відгуків для кожної\n// категорії. Застосунок не повинен зберігати статистику відгуків між різними\n// сесіями(оновлення сторінки).\n\n// Стан застосунку обов'язково повинен бути наступного вигляду, додавати\n// нові властивості не можна.\n\n/* state = {\n  good: 0,\n  neutral: 0,\n  bad: 0\n} */\n\n// Інтерфейс може мати такий вигляд.\n\n// component preview\n// Крок 2\n\n// Розшир функціонал застосунку таким чином, щоб в інтерфейсі відображалося більше статистики про зібрані відгуки. Додай відображення загальної кількості зібраних відгуків з усіх категорій та відсоток позитивних відгуків. Для цього створи допоміжні методи countTotalFeedback() і countPositiveFeedbackPercentage(), які підраховують ці значення, ґрунтуючись на даних у стані (обчислювані дані).\n\n// component preview\n// Крок 3\n\n// Виконай рефакторинг застосунку. Стан застосунку повинен залишатися у кореневому компоненті <App>.\n\n// Винеси відображення статистики в окремий компонент <Statistics good={} neutral={} bad={} total={} positivePercentage={}>.\n// Винеси блок кнопок в компонент <FeedbackOptions options={} onLeaveFeedback={}>.\n// Створи компонент <Section title=\"\">, який рендерить секцію із заголовком і дітей (children). Обгорни кожен із <Statistics> і <FeedbackOptions> у створений компонент секції.\n// Крок 4\n\n// Розшир функціонал застосунку таким чином, щоб блок статистики рендерився тільки після того, як було зібрано хоча б один відгук. Повідомлення про відсутність статистики винеси в компонент <Notification message=\"There is no feedback\">.\n\n// component preview\nimport { Component } from 'react';\nimport { Feedback } from './Feedback/Feedback';\n\nexport class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleAddFeedback = option => {\n    this.setState(prevState => {\n      return {\n        [option]: prevState[option] + 1,\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ marginLeft: 'auto', width: '400px' }}>\n        <Feedback\n          options={Object.keys(this.state)}\n          onLeaveFeedback={this.handleAddFeedback}\n        />\n      </div>\n    );\n  }\n}\n"],"mappings":";AAAA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,MAAMC,GAAG,SAASJ,SAAS,CAAC;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACjCC,KAAK,GAAG;MACNC,IAAI,EAAE,CAAC;MACPC,OAAO,EAAE,CAAC;MACVC,GAAG,EAAE;IACP,CAAC;IAAA,KAEDC,iBAAiB,GAAGC,MAAM,IAAI;MAC5B,IAAI,CAACC,QAAQ,CAACC,SAAS,IAAI;QACzB,OAAO;UACL,CAACF,MAAM,GAAGE,SAAS,CAACF,MAAM,CAAC,GAAG;QAChC,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;EAAA;EAEDG,MAAMA,CAAA,EAAG;IACP,oBACEZ,OAAA;MAAKa,KAAK,EAAE;QAAEC,UAAU,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAQ,CAAE;MAAAC,QAAA,eACjDhB,OAAA,CAACF,QAAQ;QACPmB,OAAO,EAAEC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACf,KAAK,CAAE;QACjCgB,eAAe,EAAE,IAAI,CAACZ;MAAkB;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;AACF"},"metadata":{},"sourceType":"module"}